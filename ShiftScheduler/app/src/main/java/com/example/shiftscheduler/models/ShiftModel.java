package com.example.shiftscheduler.models;

import androidx.annotation.NonNull;

import com.example.shiftscheduler.R;

import java.time.LocalDate;

/**
 * Different shift times (unnecessary?)
 */
enum ShiftTime {
    MORNING,
    EVENING,
    FULL
}

/**
 * Represents a unit of work for a specific employee for a specific date/time.
 * @author Alex Cairns
 */
public abstract class ShiftModel {
    private final int shiftID;
    private LocalDate date;
    private int employeeID;
    private ShiftTime time = null;
    private int icon = 0;


    /**
     * Constructor.
     * @param shiftID - will probably be auto-generated by future logic
     * @param date - date of shift
     * @param employeeID - ID of the assigned employee
     */
    public ShiftModel(int shiftID, LocalDate date, int employeeID) {
        this.shiftID = shiftID;
        this.date = date;
        this.employeeID = employeeID;
    }

    /**
     * @return String representation
     */
    @Override
    public String toString() {
        return "ShiftModel{" +
                "shiftID=" + shiftID +
                ", date=" + date +
                ", employeeID=" + employeeID +
                ", time=" + time +
                '}';
    }

    /**
     * Compares two Shift objects by their IDs
     * @param otherShift - shift being compared to
     * @return equality
     */
    public boolean equals(@NonNull ShiftModel otherShift) {
        return this.shiftID == otherShift.getShiftID();
    }


    /**
     * @return shift ID
     */
    public int getShiftID() {
        return shiftID;
    }

    /**
     * @return date of shift
     */
    public LocalDate getDate() {
        return date;
    }

    /**
     * Changes date
     * @param date - LocalDate object the shift occurs on
     */
    public void setDate(LocalDate date) {
        this.date = date;
    }

    /**
     * @return assigned employee's ID
     */
    public int getEmployeeID() {
        return employeeID;
    }

    /**
     * Set new employee by their ID
     * @param employeeID - new employee's ID
     */
    public void setEmployeeID(int employeeID) {
        this.employeeID = employeeID;
    }

    /**
     * @return shift time (set by subclass)
     */
    public String getTime() {
        return time.toString();
    }

    /**
     * @return shift icon
     */
    public int getIcon() {
        return icon;
    }

    /**
     * @return current shift as a morning shift
     */
    public MorningShift toMorning() {
        return new MorningShift(shiftID, date, employeeID);
    }

    /**
     * @return current shift as an evening shift
     */
    public EveningShift toEvening() {
        return new EveningShift(shiftID, date, employeeID);
    }

    /**
     * @return current shift as a full day shift
     */
    public FullShift toFull() {
        return new FullShift(shiftID, date, employeeID);
    }

    /**
     * Evaluates whether the shift meets the specified criteria
     * (possibly don't end up needing this here)
     * @return shift is valid or not
     */
    public boolean isValid() {
        //TBD
        return true; //for now
    }
}

