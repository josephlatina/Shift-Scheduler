package com.example.shiftscheduler.models;

import android.os.Build;

import androidx.annotation.RequiresApi;

import com.example.shiftscheduler.R;
import com.example.shiftscheduler.database.DatabaseHelper;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.NavigableSet;
import java.util.Set;

public class EveningShift extends ShiftModel implements Serializable {
    private final ShiftTime time = ShiftTime.EVENING;
    private final int icon = R.drawable.ic_evening;

    /**
     * Constructor.
     * @param shiftID         - will probably be auto-generated by future logic
     * @param date            - date of shift
     * @param employees       - set of assigned employees
     * @param employeesNeeded - maximum employees allowed
     */
    public EveningShift(int shiftID, LocalDate date, NavigableSet<EmployeeModel> employees, int employeesNeeded) {
        super(shiftID, date, employees, employeesNeeded);
    }

    /**
     * @return itself
     */
    @Override
    public EveningShift toEvening() {
        return this;
    }

    /**
     * Verifies there are enough employees in the shift
     * @param errors - existing list of errors
     * @return errors found
     */
    public ArrayList<ErrorModel> verifyShiftSize(ArrayList<ErrorModel> errors) {
        // check if shift is full
        if (getEmployees().size() < getEmployeesNeeded()) {
            errors.add(new ErrorModel(getDate(), "EVENING SHIFT: Not enough employees assigned."));
        }

        return errors;
    }

    /**
     * Verifies that all employees are available for this shift
     * @param database - DatabaseHelper object for the current session
     * @param errors - existing list of errors
     * @return errors found
     */
    @RequiresApi(api = Build.VERSION_CODES.O)
    public ArrayList<ErrorModel> verifyEmployeeAvailability(DatabaseHelper database,
                                                            ArrayList<ErrorModel> errors) {
        List<EmployeeModel> availableEmployees = database.getCurrentAvailableEmployees(getDate(), "EVENING");
        for (EmployeeModel employee : getEmployees()) {
            if (!availableEmployees.contains(employee)) { //employee is not available
                errors.add(new ErrorModel(getDate(), "EVENING SHIFT: "+employee.getFName()+" "+
                        employee.getLName()+" is scheduled but not available."));
            }
            else if (database.hasTimeOff(employee, getDate())) {
                errors.add(new ErrorModel(getDate(), "EVENING SHIFT: "+employee.getFName()+" "+
                        employee.getLName()+" is scheduled but has a timeoff request for this day."));
            }
        }
        return errors;
    };

    /**
     * Verifies employees' qualifications.
     * @param database - DatabaseHelper object for the current session
     * @param errors - existing list of errors
     * @return errors found
     */
    public ArrayList<ErrorModel> verifyEmployeeQualifications(DatabaseHelper database,
                                                                 ArrayList<ErrorModel> errors) {
        List<Boolean> employeeQualifications;
        boolean qualified = false;

        for (EmployeeModel employee : getEmployees()) {
            employeeQualifications = database.getQualifications(employee.getEmployeeID());
            if (!qualified && employeeQualifications.get(1)) { //employee is qualified to close
                qualified = true;
            }
        }

        if (!qualified) {
            errors.add(new ErrorModel(getDate(),"EVENING SHIFT: No employees are qualified to close."));
        }

        return errors;
    }
}
